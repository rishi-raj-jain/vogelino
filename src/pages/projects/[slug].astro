---
import Layout from "../../layouts/Layout.astro";
import ProjectPageHeader from "../../components/ProjectPageHeader.astro";
import { notion } from "../../utils/notion";
import type { BlockObjectResponse } from "@notionhq/client/build/src/api-endpoints";
import CollaboratorsGroup from "../../components/CollaboratorsGroup.astro";
import classNames from "../../utils/classNames";
import { loadJson } from "../../../scripts/lib/loadJson";
import { PROJECTS_JSON_PATH } from "../../../scripts/paths";
import * as astroComponents from "astro-imagetools/components";
import type { MappedNotionProject } from "../../../scripts/lib/parseOriginalNotionProjects";

const { Img } = astroComponents;

export async function getStaticPaths() {
  const notionProjects = await loadJson<MappedNotionProject[]>(
    PROJECTS_JSON_PATH
  );
  return notionProjects.map((notionProject) => ({
    params: { slug: notionProject.slug },
    props: notionProject,
  }));
}

export interface Props extends MappedNotionProject {}

const project = Astro.props;

const blocksResponse = await notion.blocks.children.list({
  block_id: project.id,
});

const blocks = blocksResponse.results as unknown as BlockObjectResponse[];
const highlightClasses = `bg-alt rounded-full pl-3 pr-2 mr-1 pt-2 pb-1 decoration-clone leading-relaxed`;
---

<Layout title={project.title}>
  <ProjectPageHeader {...project} />
  <div
    class={classNames(
      `grid grid-cols-3 container mx-auto max-w-6xl px-4 sm:px-8 pb-[20vw] md:pb-[10vw] 2xl:pb-[5vw]`,
      `gap-[5vw]`
    )}
  >
    <article class="col-span-3 md:col-span-2 text-2xl leading-normal">
      {
        blocks.map((block) => {
          if (block.type === "paragraph") {
            return (
              <p class="mb-5">
                {block.paragraph.rich_text
                  .map((item) => {
                    const text = item.plain_text;
                    if (!text) return false;
                    if (item.href) {
                      return (
                        <a
                          href={item.href}
                          target="_blank"
                          class={highlightClasses}
                        >
                          {text}
                        </a>
                      );
                    }
                    if (item.annotations.bold) return <strong>{text}</strong>;
                    if (item.annotations.italic) return <em>{text}</em>;
                    return <>{text}</>;
                  })
                  .filter(Boolean)}
              </p>
            );
          }
          if (block.type === "image") {
            const image = block.image as {
              caption: {
                text: {
                  content: string;
                };
              }[];
            };
            return (
              <div class="my-8">
                <Img
                  src={`/images/content/${block.id}.webp`}
                  alt={image.caption.map((c) => c.text.content).join(" ")}
                  width={725}
                  layout="fullWidth"
                  attributes={{
                    img: {
                      class: "border border-grayMed",
                    },
                  }}
                />
                {image.caption.length > 0 && (
                  <small class="text-grayDark text-sm">
                    {image.caption.map((c) => c.text.content).join(" ")}
                  </small>
                )}
              </div>
            );
          }
        })
      }
    </article>
    <aside class="col-span-4 md:col-span-1">
      <div
        class={classNames(
          `border border-grayLight bg-grayMed items-stretch`,
          `grid grid-cols-1 sm:grid-cols-2 md:grid-cols-1 gap-[1px]`
        )}
      >
        <CollaboratorsGroup collaborators={project.colleagues}>
          Made with
        </CollaboratorsGroup>
        <CollaboratorsGroup collaborators={project.supervisors}>
          Supervised by
        </CollaboratorsGroup>
        <CollaboratorsGroup collaborators={project.institutions}>
          Made @
        </CollaboratorsGroup>
        <CollaboratorsGroup collaborators={project.collaborators}>
          In collaboration with
        </CollaboratorsGroup>
      </div>
    </aside>
  </div>
</Layout>
