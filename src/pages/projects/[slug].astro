---
import '@splidejs/splide/css/core'
import Layout from '../../layouts/Layout.astro'
import ProjectPageHeader from '../../components/ProjectPageHeader.astro'
import CollaboratorsGroup from '../../components/CollaboratorsGroup.astro'
import classNames from '../../utils/classNames'
import { loadJson } from '../../../scripts/lib/loadJson'
import { PROJECTS_JSON_PATH } from '../../../scripts/paths'
import type { MappedNotionProject } from '../../../scripts/lib/parseOriginalNotionProjects'
import Thumbnail from '../../components/Thumbnail.astro'
import NotionTextContents from '../../components/NotionTextContents.astro'
import SeeOneMore from '../../components/SeeOneMore.astro'
import ProjectSlider from '../../components/ProjectSlider.astro'
import ArrowUp from '../../components/icons/ArrowUp.astro'
import ImageZoomer from '../../components/ImageZoomer.astro'

export async function getStaticPaths() {
	const notionProjects = await loadJson<MappedNotionProject[]>(
		PROJECTS_JSON_PATH,
	)
	return notionProjects.map((notionProject, idx) => {
		const nextIdx = idx + 1 > notionProjects.length - 1 ? 0 : idx + 1
		const prevIdx = idx - 1 < 0 ? notionProjects.length - 1 : idx - 1
		return {
			params: { slug: notionProject.slug },
			props: {
				project: notionProject,
				prevProject: notionProjects[prevIdx],
				nextProject: notionProjects[nextIdx],
			},
		}
	})
}

const highlightClasses = `bg-alt rounded-full pl-3 pr-2 mr-1 pt-2 pb-1 decoration-clone leading-relaxed`

export interface Props {
	project: MappedNotionProject
	nextProject: MappedNotionProject
	prevProject: MappedNotionProject
}

const { project, nextProject, prevProject } = Astro.props
---

<Layout title={project.title} withHeaderBg={false}>
	<main class:list={[`flex flex-col`]}>
		<ProjectSlider project={project} />
		<section>
			<nav
				class:list={[`flex w-screen justify-between px-6`, `-translate-y-full`]}
			>
				<button
					aria-label="Scroll to the text description of the project"
					id="about-tab"
					class:list={[
						`transition-colors z-10 text-xl md:text-2xl uppercase`,
						`tracking-wide px-6 pt-4 pb-2 border -ml-px rounded-t`,
						`bg-bg border-grayMed z-20 border-b-bg`,
						`focus:outline-none focus:ring-inset focus:ring-2`,
						`focus:ring-fg focus:z-30 focus:rounded`,
						`hover-hover:hover:bg-alt`,
					]}
				>
					Project info
				</button>
				<div class="flex -gap-px">
					<button
						aria-label="Slide prev project image in"
						id="project-prev"
						class:list={[
							`transition-colors z-10 text-xl md:text-2xl uppercase`,
							`tracking-wide px-4 pt-4 pb-3 border -ml-px rounded-tl`,
							`bg-bg border-grayMed z-20`,
							`focus:outline-none focus:ring-inset focus:ring-2`,
							`focus:ring-fg focus:z-30 focus:rounded`,
							`hover-hover:hover:bg-alt`,
						]}
					>
						<ArrowUp className="-rotate-90" />
					</button>
					<button
						aria-label="Slide next project image in"
						id="project-next"
						class:list={[
							`transition-colors z-10 text-xl md:text-2xl uppercase`,
							`tracking-wide px-4 pt-4 pb-3 border -ml-px rounded-tr`,
							`bg-bg border-grayMed z-20`,
							`focus:outline-none focus:ring-inset focus:ring-2`,
							`focus:ring-fg focus:z-30 focus:rounded`,
							`hover-hover:hover:bg-alt`,
						]}
					>
						<ArrowUp className="rotate-90" />
					</button>
				</div>
			</nav>
			<div class="px-6 text-xl md:text-2xl leading-normal">
				<span class="text-xl block mb-3 md:mb-6">{project.year}</span>
				<h1
					class={classNames(
						`text-3xl md:text-6xl 2xl:text-8xl`,
						`leading-[1em] text-balance`,
						`uppercase font-bold`,
					)}
				>
					{project.title}
				</h1>
				<p
					class="text-2xl md:text-3xl mt-4 max-w-2xl mb-6 md:mb-8 text-balance"
				>
					{
						project.description.map(
							(part) =>
								part.text &&
								(part.link ? (
									<a href={part.link} class={highlightClasses} target="_blank">
										{part.text.trim()}
									</a>
								) : (
									<span class={part.highlighted ? highlightClasses : ''}>
										{part.text.trim()}
									</span>
								)),
						)
					}
				</p>
				<NotionTextContents blocks={project.blocks} />
				<aside class="col-span-4 md:col-span-1">
					<div
						class={classNames(
							`border border-grayLight bg-grayMed items-stretch`,
							`grid grid-cols-1 sm:grid-cols-2 md:grid-cols-1 gap-[1px]`,
						)}
					>
						<CollaboratorsGroup collaborators={project.clients}>
							Made for
						</CollaboratorsGroup>
						<CollaboratorsGroup collaborators={project.colleagues}>
							Made with
						</CollaboratorsGroup>
						<CollaboratorsGroup collaborators={project.supervisors}>
							Supervised by
						</CollaboratorsGroup>
						<CollaboratorsGroup collaborators={project.institutions}>
							Made @
						</CollaboratorsGroup>
						<CollaboratorsGroup collaborators={project.collaborators}>
							In collaboration with
						</CollaboratorsGroup>
					</div>
				</aside>
			</div>
			<section
				class={classNames(
					`flex flex-col`,
					`md:grid md:grid-cols-[1fr,0,0,0,1fr] xl:grid-cols-[0,450px,1fr,450px,0]`,
					`border-t border-grayMed`,
				)}
			>
				<Thumbnail
					{...prevProject}
					highlighted={false}
					rotationClass="rotate-1"
				/>
				<div class="flex items-center justify-center">
					<SeeOneMore className="hidden xl:block" />
				</div>
				<Thumbnail
					{...nextProject}
					highlighted={false}
					className="xl:border-l md:border-l-grayMed"
					rotationClass="-rotate-1"
				/>
			</section>
		</section>
	</main>
	<ImageZoomer />
</Layout>

<script defer>
	const infoButton = document.getElementById('about-tab')
	infoButton?.addEventListener('click', (evt) => {
		evt.preventDefault()
		const infoButtonTop = infoButton.getBoundingClientRect().top
		window.scrollTo({ top: infoButtonTop, behavior: 'smooth' })
	})
</script>
