---
import classNames from "../utils/classNames";
import type { MappedNotionProject } from "../utils/getNotionProjects";
import Link from "./icons/Link.astro";
import * as astroComponents from "astro-imagetools/components";

const { Img } = astroComponents;

export interface Props extends MappedNotionProject {}

const project = Astro.props;
const highlightClasses = `bg-alt rounded-full pl-3 pr-2 mr-1 pt-2 pb-1 decoration-clone leading-relaxed`;
---

<div class="relative overflow-hidden w-screen">
  <div
    class="w-screen h-[60vh] overflow-hidden md:h-screen absolute top-0 left-0 -z-10 border-b border-grayMed"
  >
    <Img
      src={`/images/bg-images/${project.slug}.webp`}
      alt={project.title}
      layout="fill"
    />

    <div class={classNames(`absolute inset-0 bg-grayMed mix-blend-screen`)}>
    </div>
    <div
      class={classNames(`absolute inset-0 bg-grayUltraLight mix-blend-color`)}
    >
    </div>
  </div>
  <div
    class="pt-[20vw] pb-[8vw] md:pt-[8vw] md:pb-[4vw] flex items-center justify-center px-8 container mx-auto"
  >
    <div class="text-center flex flex-col items-center">
      <span class="text-2xl mb-3 md:mb-6">{project.year}</span>
      <h1
        class={classNames(
          `text-5xl md:text-7xl 2xl:text-8xl`,
          `leading-[1em]`,
          `uppercase font-bold inline-block`
        )}
      >
        {project.title}
      </h1>
      <p
        class="text-xl md:text-2xl md:leading-relaxed mt-4 max-w-2xl mb-6 md:mb-2"
      >
        {
          project.description.map(
            (part) =>
              part.text &&
              (part.link ? (
                <a href={part.link} class={highlightClasses} target="_blank">
                  {part.text.trim()}
                </a>
              ) : (
                <span class={part.highlighted ? highlightClasses : ""}>
                  {part.text.trim()}
                </span>
              ))
          )
        }
      </p>
    </div>
  </div>
  <div
    class="container mx-auto max-w-6xl px-4 sm:px-8 pb-[16vw] md:pb-[7vw] 2xl:pb-[5vw]"
  >
    <div class="bg-alt rounded-t-lg p-1 md:p-2 pt-6 md:pt-8 relative">
      {
        project.url && (
          <a
            href={project.url}
            target="_blank"
            class={classNames(
              `font-special antialiased absolute left-1/2 -translate-x-1/2`,
              `top-0 text-2xl -translate-y-1/2 px-4 pb-1 rounded-full bg-fg text-alt`,
              `transition-colors hover:bg-alt hover:text-fg border-2 border-fg`,
              `hover:scale-110 special-button flex gap-2 items-center`
            )}
          >
            <span>Launch</span> <Link className="mt-1" />
          </a>
        )
      }
      <span
        class={classNames(
          `top-2 left-2`,
          `md:top-2.5 md:left-2.5`,
          `absolute flex gap-1 md:gap-2`
        )}
      >
        <span class="w-2 h-2 md:w-3 md:h-3 rounded-full bg-fg"></span>
        <span
          class="w-2 h-2 md:w-3 md:h-3 rounded-full bg-grayDark mix-blend-multiply opacity-20"
        ></span>
        <span
          class="w-2 h-2 md:w-3 md:h-3 rounded-full bg-grayDark mix-blend-multiply opacity-20"
        ></span>
      </span>
      <Img
        src={`/images/thumbnails/${project.slug}.webp`}
        alt={`Screenshot of the project ${project.title}`}
        attributes={{
          img: {
            class: "w-full rounded",
          },
        }}
      />
      <div
        class="absolute w-full top-full left-0 h-4 bg-tooth-pattern bg-repeat-x bg-top"
      >
      </div>
    </div>
  </div>
</div>

<style>
  .special-button {
    transition: opacity 200ms ease-in-out,
      transform 500ms cubic-bezier(0, 2.09, 0.27, 0.86);
    will-change: transform, color, background-color;
  }
</style>
