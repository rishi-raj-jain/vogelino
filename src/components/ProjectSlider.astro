---
import ProjectSliderSlide from '../components/ProjectSliderSlide.astro'
import classNames from '../utils/classNames'
import NotionFormattedRichText from './NotionFormattedRichText.astro'
import Link from './icons/Link.astro'
import * as astroComponents from 'astro-imagetools/components'
import 'photoswipe/style.css'

const { Img } = astroComponents

const { project } = Astro.props
---

<div
	class:list={[
		`pswp-gallery`,
		`splide h-[calc(100svh-16px)] w-screen overflow-x-hidden mx-auto`,
		`max-w-[1438px]`,
		`outline-none group`,
	]}
	aria-label="List of project images"
	id="main-slider"
>
	<div
		class:list={[
			`splide__track h-[calc(100svh-16px)] w-screen max-w-[1439px]`,
			`border-b-grayMed border-b bg-grayUltraLight relative`,
		]}
	>
		<ul class="splide__list w-screen h-[calc(100svh-16px)] max-w-[1440px]">
			<li
				class:list={[
					`splide__slide relative`,
					`w-screen h-[calc(100svh-188px)] max-w-[1440px]`,
					`items-stretch flex !mt-20 mb-0 !md:my-20`,
					`gap-6 justify-between`,
				]}
			>
				<div
					class={classNames(
						`basis-[180px] shrink-0 grow flex flex-col`,
						`items-start justify-start md:justify-center pl-6`,
						`md:items-center`,
					)}
				>
					<div
						class={classNames(
							'inline-flex flex-col items-start',
							`xs:max-w-[80%]`,
						)}
					>
						<span
							class={classNames(
								`sm:text-lg md:text-xl inline-block mb-2 sm:mb-3 md:mb-6`,
								`select-text`,
							)}>{project.year}</span
						>
						<h1
							class:list={[
								`text-3xl sm:text-5xl md:text-6xl 2xl:text-7xl`,
								`leading-[1em] text-balance`,
								`uppercase font-bold select-text`,
							]}
							set:html={project.title}
						/>
						<p
							class:list={[
								`text-balance select-text`,
								`text-lg sm:text-xl md:text-2xl lg:text-3xl mt-2 sm:mt-3 md:mt-4`,
							]}
						>
							<NotionFormattedRichText richText={project.description} />
						</p>

						{
							project.url && (
								<a
									href={project.url}
									target="_blank"
									class={classNames([
										`font-special antialiased`,
										`top-0 rounded-full bg-fg text-alt`,
										`hover-hover:hover:bg-alt hover-hover:hover:text-fg`,
										`transition-colors motion-reduce:transition-none`,
										`hover-hover:hover:scale-110`,
										`flex items-center`,
										`px-2 pb-0.5 md:px-4 md:pb-1 text-xl md:text-2xl`,
										`gap-1 md:gap-2`,
										`mt-3 sm:mt-4 md:mt-5`,
										`outline-none focus-visible:ring-2`,
										`focus-visible:ring-fg focus-visible:ring-offset-2`,
										`focus-visible:ring-offset-bg`,
									])}
								>
									<span>Launch</span> <Link className="mt-1" />
								</a>
							)
						}
					</div>
				</div>
				<div
					class={classNames(
						`w-full max-w-[50%] h-full relative`,
						`border-2 border-r-0 rounded-l-md border-alt`,
						`shadow-xl shadow-grayLight dark:shadow-grayUltraLight`,
						`contrast-more:shadow-bg`,
					)}
				>
					<Img
						src={`/images/thumbnails/${project.slug}.webp`}
						alt={`Thumbnail for the project "${project.title}"`}
						layout="fixed"
						attributes={{
							img: {
								class: classNames(
									`!h-full rounded-l !object-left`,
									`absolute top-0 right-px`,
								),
							},
						}}
					/>
					<img
						src={`/images/illustrations/${project.slug}.svg`}
						alt={`Illustration for the project ${project.title}`}
						class:list={[
							`max-h-[23vh] max-w-[260px] absolute bottom-0`,
							`-left-12 lg:right-[16%]`,
							`pointer-events-none`,
						]}
					/>
				</div>
			</li>

			{
				project.media.map((i) => (
					<ProjectSliderSlide projectName={project.title} imageUrl={i} />
				))
			}
		</ul>
	</div>
</div>

<script>
	import Splide from '@splidejs/splide'
	import PhotoSwipeLightbox from 'photoswipe/lightbox'

	const slider = new Splide('.splide', {
		rewind: true,
		arrows: false,
		pagination: true,
		paginationKeyboard: true,
		keyboard: true,
	})

	slider.mount()

	const nextButton = document.getElementById('project-next')
	const prevButton = document.getElementById('project-prev')

	nextButton.addEventListener('click', (evt) => {
		evt.preventDefault()
		slider.go('>')
	})
	prevButton.addEventListener('click', (evt) => {
		evt.preventDefault()
		slider.go('<')
	})

	const zoomableImgs = Array.from(document.querySelectorAll('.powerswipe-link'))
	zoomableImgs.forEach((liEl: HTMLLIElement) => {
		const img = liEl.querySelector('img')
		const width = img.getAttribute('width')
		const height = img.getAttribute('height')
		img.style.aspectRatio = `${width}/${height}`
		liEl.setAttribute('data-pswp-width', width)
		liEl.setAttribute('data-pswp-height', height)
	})

	const lightbox = new PhotoSwipeLightbox({
		gallery: '#main-slider',
		children: '.powerswipe-link',
		showHideAnimationType: 'fade',
		wheelToZoom: true,
		allowPanToNext: false,
		preloadFirstSlide: false,
		pswpModule: () => import('photoswipe'),
	})

	lightbox.on('change', () => {
		slider.go(lightbox.pswp.currIndex + 1)
	})
	lightbox.init()
</script>

<style is:global>
	.splide__img {
		@apply rounded max-w-[calc(100svw-48px)] max-h-[calc(100svh-154px)];
	}
	.splide__pagination {
		@apply absolute left-1/2 opacity-0 sm:opacity-100 bottom-7 gap-1.5 -translate-x-1/2;
	}

	.splide__pagination li {
		@apply w-2 h-2;
	}

	.splide:focus-visible .splide__track {
		@apply ring-2 ring-fg ring-offset-4 ring-offset-grayUltraLight;
		@apply ring-inset rounded-lg;
	}

	button.splide__pagination__page {
		@apply w-2 h-2 rounded-full bg-grayMed transition-colors;
		@apply outline-none motion-reduce:transition-none;
	}

	button.splide__pagination__page[aria-selected='true'] {
		@apply bg-fg focus-visible:ring-2 focus-visible:ring-fg;
		@apply focus-visible:ring-offset-2 focus-visible:ring-offset-bg;
	}

	body .pswp {
		z-index: 998 !important;
		--pswp-bg: var(--bg);
		--pswp-placeholder-bg: var(--grayUltraLight);
		--pswp-preloader-color: var(--grayMed);
		--pswp-preloader-color-secondary: var(--bg);
		--pswp-icon-color: var(--fg);
		--pswp-icon-color-secondary: var(--grayUltraLight);
		--pswp-icon-stroke-color: var(--grayUltraLight);
		--pswp-icon-stroke-width: 2px;
		--pswp-error-text-color: var(--pswp-icon-color);
	}

	body .pswp .pswp__bg {
		opacity: 1 !important;
	}

	.pswp .pswp__button {
		@apply outline-none focus-visible:ring-2 focus-visible:ring-fg;
		@apply focus-visible:ring-offset-2 focus-visible:ring-offset-bg;
		@apply focus-visible:rounded-md;
	}
</style>
