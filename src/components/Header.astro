---
import classNames from '../utils/classNames'
import LogoInteractive from './LogoInteractive.astro'
import HeaderMenuLink from './HeaderMenuLink.astro'
import SocialIcons from './SocialIcons.astro'
import ThemeToggle from './ThemeToggle.astro'
import AvailableForHireBanner from './AvailableForHireBanner.astro'

export interface Props {
	withBg?: boolean
}

const { withBg = true } = Astro.props

const withBgClasses = 'bg-bg border-grayMed'
const withoutBgClasses = 'border-b-transparent'
---

<header
	aria-label="Main header"
	class={classNames(
		!withBg && `logo-visible`,
		`fixed top-0 left-1/2 -translate-x-1/2 w-screen z-40`,
		`text-fg px-8 max-w-[1440px] min-[1440px]:border-x`,
		`min-[1440px]:border-x-grayMed border-b`,
		`flex justify-between items-center h-[101px]`,
		`pt-8`,
		`transition motion-reduce:transition-none`,
		withBg ? withBgClasses : withoutBgClasses,
	)}
	data-withBg={`${withBg}`}
	data-withBgClasses={withBgClasses}
	data-withoutBgClasses={withoutBgClasses}
>
	<LogoInteractive isMinimal={!withBg} />
	<button
		aria-label="Hide the main navitation menu"
		id="burger-menu"
		aria-hidden="false"
		aria-expanded="false"
		class="sm:hidden sm:invisible"
	>
		<span></span>
	</button>
	<nav
		id="menu"
		aria-label="Main navigation"
		class={classNames(
			`fixed top-[69px] left-0 w-screen h-[calc(100svh-69px)] bg-bg sm:bg-transparent`,
			`opacity-0 pointer-events-none sm:opacity-100 sm:static sm:pointer-events-auto`,
			`sm:w-auto sm:h-auto sm:bg-none transition-opacity`,
			`motion-reduce:transition-none`,
		)}
	>
		<ul
			class={classNames(`flex flex-col sm:flex-row sm:gap-2 items-center`)}
			aria-label="Main menu items"
		>
			<HeaderMenuLink href="/" title="Projects" />
			<HeaderMenuLink href="/about" title="About" />
			<HeaderMenuLink href="/inspirations" title="Cool sites" />
			<li
				aria-label="Main menu link: Other actions"
				class={classNames(
					`w-full sm:w-auto py-5 sm:p-0 text-grayDark`,
					`flex justify-between items-center pr-5 sm:pr-0`,
				)}
			>
				<div class="sm:hidden" id="social-icons"><SocialIcons /></div>
				<div class="text-fg inline-flex items-center">
					<ThemeToggle />
				</div>
			</li>
		</ul>
	</nav>
	<AvailableForHireBanner />
</header>

<script defer>
	// -- Hamburger menu
	const burgerMenu = document.getElementById('burger-menu')
	const menu = document.getElementById('menu')
	const socialIcons = document.getElementById('social-icons')

	// -- Header background toggle
	const header = document.querySelector('header[aria-label="Main header"]')
	const withBg = header.dataset.withbg

	const withBgClassString = header.dataset.withbgclasses || ''
	const withoutBgClassString = header.dataset.withoutbgclasses || ''
	const withBgClasses = withBgClassString.trim().split(' ')
	const withoutBgClasses = withoutBgClassString.trim().split(' ')

	// -- Hamburger menu logic
	burgerMenu.addEventListener('click', () => {
		burgerMenu.classList.toggle('close')
		menu.classList.toggle('opacity-0')
		menu.classList.toggle('pointer-events-none')

		const isOpened = !!burgerMenu.classList.contains('close')
		const verb = isOpened ? `Hide` : `Show`
		burgerMenu.setAttribute('aria-label', `${verb} the main navitation menu`)
		burgerMenu.setAttribute('aria-expanded', `${isOpened}`)
	})

	const updateVisibility = () => {
		if (window.innerWidth < 768) {
			burgerMenu.setAttribute('aria-hidden', 'false')
			socialIcons.setAttribute('aria-hidden', 'false')
		} else {
			burgerMenu.setAttribute('aria-hidden', 'true')
			socialIcons.setAttribute('aria-hidden', 'true')
		}
	}

	const mediaQuery = window.matchMedia(`@media screen and (max-width: 767px)`)
	mediaQuery.addEventListener(`change`, updateVisibility)

	updateVisibility()

	// -- Header background logic
	function updateHeaderBg() {
		if (!header) return

		const isOpened = !!burgerMenu.classList.contains('close')
		const scrollOffset =
			window.pageYOffset ??
			document.documentElement.scrollTop ??
			document.body.scrollTop ??
			0

		if (withBg !== 'false' || scrollOffset >= 50 || isOpened) {
			header.classList.add(...withBgClasses)
			header.classList.remove(...withoutBgClasses)
		} else if (scrollOffset < 50 && !isOpened) {
			header.classList.remove(...withBgClasses)
			header.classList.add(...withoutBgClasses)
		}

		requestAnimationFrame(updateHeaderBg)
	}
	updateHeaderBg()

	const scrollUpClass = [`scrolled-up`, `logo-visible`]
	const scrollDownClass = `scrolled-down`
	const scrollTopClass = `scrolled-top`
	let lastScroll =
		window.pageYOffset ??
		document.documentElement.scrollTop ??
		document.body.scrollTop ??
		0

	function updateScrollUpAndDownVisibility() {
		if (!header) return

		const currentScroll =
			window.pageYOffset ??
			document.documentElement.scrollTop ??
			document.body.scrollTop ??
			0

		if (currentScroll <= 69) {
			header.classList.remove(...scrollUpClass)
			header.classList.remove(scrollDownClass)
			header.classList.add(scrollTopClass)
			requestAnimationFrame(updateScrollUpAndDownVisibility)
			return
		} else {
			header.classList.remove(scrollTopClass)
		}

		if (
			currentScroll > lastScroll &&
			!header.classList.contains(scrollDownClass)
		) {
			// down
			header.classList.remove(...scrollUpClass)
			header.classList.add(scrollDownClass)
		} else if (
			currentScroll < lastScroll &&
			header.classList.contains(scrollDownClass)
		) {
			// up
			header.classList.remove(scrollDownClass)
			header.classList.add(...scrollUpClass)
		}
		lastScroll = currentScroll

		requestAnimationFrame(updateScrollUpAndDownVisibility)
	}

	updateScrollUpAndDownVisibility()
</script>

<script defer>
	const darkModePreference = window.matchMedia('(prefers-color-scheme: dark)')
	const themeToggler = document.getElementById('theme-toggle')
	const initialTheme = localStorage.getItem('theme')
	updateToggler(initialTheme)

	themeToggler.addEventListener('click', () => {
		let newUserPref =
			themeToggler.getAttribute('aria-checked') === 'true' ? 'light' : 'dark'
		updateToggler(newUserPref)
	})

	darkModePreference.addEventListener('change', (e) =>
		updateToggler(e.matches ? 'dark' : 'light'),
	)

	function updateToggler(theme) {
		const finalTheme = theme || (darkModePreference.matches ? 'dark' : 'light')
		const isDark = finalTheme === 'dark'
		document.documentElement.dataset.appliedMode = finalTheme
		theme && localStorage.setItem('theme', theme)

		themeToggler.setAttribute('aria-checked', isDark.toString())
	}
</script>

<style>
	header[aria-label='Main header'].scrolled-down {
		@apply -translate-y-full;
	}
	header[aria-label='Main header'].scrolled-up {
		@apply translate-y-0;
	}
	header[aria-label='Main header']:not(.scrolled-top) {
		@apply pt-0 h-[69px];
	}
	#burger-menu {
		cursor: pointer;
		height: 39px;
		width: 39px;
		overflow: visible;
		position: relative;
		z-index: 2;
		@apply -mr-2;
	}
	#burger-menu:focus-visible,
	#burger-menu:focus {
		@apply outline-none;
	}
	#burger-menu:focus-visible {
		@apply ring-2 ring-fg rounded-full;
	}
	#burger-menu span,
	#burger-menu span:before,
	#burger-menu span:after {
		@apply bg-fg;
		display: block;
		height: 2px;
		opacity: 1;
		position: absolute;
		transition: 0.3s ease-in-out;
		@apply motion-reduce:transition-none;
	}
	#burger-menu span:before,
	#burger-menu span:after {
		content: '';
	}
	#burger-menu span:before {
		left: 0px;
		top: -10px;
		width: 27px;
	}
	#burger-menu span {
		right: 6px;
		top: 18px;
		width: 27px;
	}
	#burger-menu span:after {
		left: 0px;
		top: 10px;
		width: 27px;
	}
	#burger-menu.close span:before {
		top: 0px;
		transform: rotate(90deg);
		width: 27px;
	}
	#burger-menu.close span {
		transform: rotate(-45deg);
		top: 18px;
		width: 27px;
	}
	#burger-menu.close span:after {
		top: 0px;
		left: 0;
		transform: rotate(90deg);
		opacity: 0;
		width: 0;
	}
</style>
