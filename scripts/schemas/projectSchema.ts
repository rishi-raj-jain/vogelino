import { z } from 'zod'
import {
	NotionBasicTextSchema,
	NotionBlockSchema,
	NotionDatabaseCheckboxSchema,
	NotionDatabaseFilesSchema,
	NotionDatabaseFormulaSchema,
	NotionDatabaseMultiSelectSchema,
	NotionDatabaseNumberSchema,
	NotionDatabaseRelationSchema,
	NotionDatabaseRichTextBlockSchema,
	NotionDatabaseRollupSchema,
	NotionDatabaseSelectSchema,
	NotionDatabaseTimeSchema,
	NotionDatabaseTitleSchema,
	NotionDatabaseUrlSchema,
	NotionPageSchema,
	NotionTextSchema,
} from 'notion-api-zod-schema'
import { CollaboratorSchema } from './collaboratorSchema'

export const OriginalProjectSchema = NotionPageSchema.extend({
	properties: z.object({
		Quote: NotionDatabaseRelationSchema,
		isActual: NotionDatabaseFormulaSchema,
		'Highlight in Portfolio': NotionDatabaseCheckboxSchema,
		Year: NotionDatabaseNumberSchema,
		Thumbnail: NotionDatabaseFilesSchema,
		ClientID: NotionDatabaseRollupSchema,
		'In collaboration with': NotionDatabaseRelationSchema,
		'Show in Portfolio': NotionDatabaseCheckboxSchema,
		Invoice: NotionDatabaseRelationSchema,
		Client: NotionDatabaseRelationSchema,
		Illustration: NotionDatabaseFilesSchema,
		ID: NotionBasicTextSchema,
		'Made for': NotionDatabaseRelationSchema,
		'Long-ID': NotionDatabaseFormulaSchema,
		Type: NotionDatabaseSelectSchema,
		Tags: NotionDatabaseMultiSelectSchema,
		'Created Time': NotionDatabaseTimeSchema,
		URL: NotionDatabaseUrlSchema,
		BgImage: NotionDatabaseFilesSchema,
		Name: NotionDatabaseTitleSchema,
		NameShort: NotionDatabaseRichTextBlockSchema,
		'Supervised by': NotionDatabaseRelationSchema,
	}),
})
export type OriginalProjectType = z.infer<typeof OriginalProjectSchema>

export const ProjectSchema = z.object({
	id: z.string(),
	title: z.string(),
	nameShort: z.string().optional(),
	description: z.array(NotionTextSchema),
	type: z.string(),
	slug: z.string(),
	thumbnail: z.string(),
	illustration: z.string(),
	bgImage: z.string(),
	year: z.number(),
	url: z.string().optional(),
	collaborators: z.array(CollaboratorSchema),
	colleagues: z.array(CollaboratorSchema),
	supervisors: z.array(CollaboratorSchema),
	institutions: z.array(CollaboratorSchema),
	clients: z.array(CollaboratorSchema),
	highlighted: z.boolean(),
	blocks: z.array(NotionBlockSchema),
	media: z.array(z.string()),
})
export type ProjectType = z.infer<typeof ProjectSchema>
